{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\guinh\\\\OneDrive\\\\Documentos\\\\projetoFrete\\\\fretefacil-frontend\\\\src\\\\Solicitacoes.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import api from './Api';\n\n// function Solicitacoes() {\n//   const [solicitacoes, setSolicitacoes] = useState([]);\n\n//   useEffect(() => {\n//     api.get('solicitacoes/')\n//       .then(response => {\n//         setSolicitacoes(response.data);\n//       })\n//       .catch(error => {\n//         console.error(\"Erro ao buscar solicitações:\", error);\n//       });\n//   }, []);\n\n//   return (\n//     <div>\n//       <h2>Solicitações de Serviço</h2>\n//       <ul>\n//         {solicitacoes.map(s => (\n//           <li key={s.id}>\n//             {s.origem} para {s.destino} na data {s.data}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default Solicitacoes;\n\n// import React, { useEffect, useState } from 'react';\n// import api from './Api';\n\n// function Solicitacoes() {\n//   const [solicitacoes, setSolicitacoes] = useState([]);\n\n//   useEffect(() => {\n//     api.get('solicitacoes/')\n//       .then(response => {\n//         setSolicitacoes(response.data);\n//       })\n//       .catch(error => {\n//         console.error(\"Erro ao buscar solicitações:\", error);\n//       });\n//   }, []);\n\n//   // Função para calcular o valor com base na distância\n//   const calcularValor = (distancia) => {\n//     return (distancia * 1.5).toFixed(2);  \n//   };\n\n// const fetchCoordinatesFromAddress = async (endereco) => {\n//   try {\n//     const response = await fetch(\n//       `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(endereco)}&format=json&limit=1`\n//     );\n//     const data = await response.json();\n//     if (data && data[0]) {\n//       return {\n//         latitude: parseFloat(data[0].lat),\n//         longitude: parseFloat(data[0].lon)\n//       };\n//     } else {\n//       throw new Error('Endereço não encontrado');\n//     }\n//   } catch (error) {\n//     console.error('Erro ao converter endereço em coordenadas:', error);\n//     return null;\n//   }\n// };\n\n// const calcularDistancia = (pontoOrigem, pontoDestino) => {\n//   // Verifique se os pontos são válidos\n//   if (\n//     !pontoOrigem ||\n//     !pontoDestino ||\n//     isNaN(pontoOrigem.latitude) ||\n//     isNaN(pontoOrigem.longitude) ||\n//     isNaN(pontoDestino.latitude) ||\n//     isNaN(pontoDestino.longitude)\n//   ) {\n//     console.error('Erro: pontos inválidos ou NaN');\n//     return 0;\n//   }\n\n//   // Fórmula de Haversine para calcular a distância entre dois pontos\n//   const φ1 = pontoOrigem.latitude * (Math.PI / 180); // Convertendo para radianos\n//   const φ2 = pontoDestino.latitude * (Math.PI / 180);\n//   const Δφ = (pontoDestino.latitude - pontoOrigem.latitude) * (Math.PI / 180);\n//   const Δλ = (pontoDestino.longitude - pontoOrigem.longitude) * (Math.PI / 180);\n\n//   const a =\n//     Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n//     Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n//   const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n//   const raioTerra = 6371; // Raio da Terra em km\n//   const distancia = raioTerra * c; // Distância em km\n\n//   return distancia;\n// };\n\n// const calcularDistanciaEntreEnderecos = async (enderecoOrigem, enderecoDestino) => {\n//   // Obtenha as coordenadas para os dois endereços\n//   const pontoOrigem = await fetchCoordinatesFromAddress(enderecoOrigem);\n//   const pontoDestino = await fetchCoordinatesFromAddress(enderecoDestino);\n\n//   if (!pontoOrigem || !pontoDestino) {\n//     console.error('Erro: não foi possível obter coordenadas');\n//     return;\n//   }\n\n//   // Calcule a distância usando a função de Haversine\n//   const distancia = calcularDistancia(pontoOrigem, pontoDestino);\n//   console.log('Distância entre os endereços: ', distancia, 'km');\n// };\n\n//   return (\n//     <div>\n//       <h2>Solicitações de Serviço</h2>\n//       <ul>\n//         {solicitacoes.map(s => {\n//             console.log(s);\n//           const distancia = calcularDistancia(s.origem, s.destino);\n//           const valor = calcularValor(distancia);\n//           return (\n//             <li key={s.id}>\n//               <h3>Solicitação de {s.cliente}</h3>\n//               <p>Origem: {s.origem.endereco} - Destino: {s.destino.endereco}</p>\n//               <p>Distância: {distancia} km</p>\n//               <p>Valor: R${valor}</p>\n//             </li>\n//           );\n//         })}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default Solicitacoes;\n\nimport React, { useEffect, useState } from 'react';\nimport api from './Api';\nimport { calcularDistancia } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Solicitacoes() {\n  _s();\n  const [solicitacoes, setSolicitacoes] = useState([]);\n  const [coordenadas, setCoordenadas] = useState([]); // Estado para armazenar as coordenadas\n\n  // Buscar as solicitações\n  useEffect(() => {\n    api.get('solicitacoes/').then(async response => {\n      setSolicitacoes(response.data);\n      const solicitacoesComCoordenadas = await Promise.all(response.data.map(async solicitacao => {\n        const pontoOrigem = await fetchCoordinatesFromAddress(solicitacao.origem.endereco);\n        const pontoDestino = await fetchCoordinatesFromAddress(solicitacao.destino.endereco);\n        return {\n          ...solicitacao,\n          pontoOrigem,\n          pontoDestino\n        };\n      }));\n      setCoordenadas(solicitacoesComCoordenadas); // Atualiza as solicitações com coordenadas\n    }).catch(error => {\n      console.error(\"Erro ao buscar solicitações:\", error);\n    });\n  }, []);\n\n  // Função para calcular o valor com base na distância\n  const calcularValor = distancia => {\n    return (distancia * 1.5).toFixed(2);\n  };\n\n  // Função para calcular a distância entre dois pontos usando a fórmula de Haversine\n  // const calcularDistancia = (pontoOrigem, pontoDestino) => {\n  //   if (\n  //     !pontoOrigem ||\n  //     !pontoDestino ||\n  //     isNaN(pontoOrigem.latitude) ||\n  //     isNaN(pontoOrigem.longitude) ||\n  //     isNaN(pontoDestino.latitude) ||\n  //     isNaN(pontoDestino.longitude)\n  //   ) {\n  //     console.error('Erro: pontos inválidos ou NaN');\n  //     return 0;\n  //   }\n\n  //   const φ1 = pontoOrigem.latitude * (Math.PI / 180);\n  //   const φ2 = pontoDestino.latitude * (Math.PI / 180);\n  //   const Δφ = (pontoDestino.latitude - pontoOrigem.latitude) * (Math.PI / 180);\n  //   const Δλ = (pontoDestino.longitude - pontoOrigem.longitude) * (Math.PI / 180);\n\n  //   const a =\n  //     Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n  //     Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n  //   const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n  //   const raioTerra = 6371; // Raio da Terra em km\n  //   const distancia = raioTerra * c; // Distância em km\n\n  //   return distancia;\n  // };\n\n  // Função para buscar as coordenadas a partir de um endereço\n  const fetchCoordinatesFromAddress = async endereco => {\n    try {\n      const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(endereco)}&format=json&limit=1`);\n      const data = await response.json();\n      if (data && data[0]) {\n        return {\n          latitude: parseFloat(data[0].lat),\n          longitude: parseFloat(data[0].lon)\n        };\n      } else {\n        throw new Error('Endereço não encontrado');\n      }\n    } catch (error) {\n      console.error('Erro ao converter endereço em coordenadas:', error);\n      return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Solicita\\xE7\\xF5es de Servi\\xE7o\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: coordenadas.map(s => {\n        // Calcula a distância apenas quando as coordenadas estão disponíveis\n        const distancia = calcularDistancia(s.pontoOrigem, s.pontoDestino);\n        const valor = calcularValor(distancia);\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Solicita\\xE7\\xE3o de \", s.cliente_nome]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Origem: \", s.origem]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Destino: \", s.destino]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Dist\\xE2ncia: \", distancia, \" km\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Valor: R$\", valor]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 15\n          }, this)]\n        }, s.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n}\n_s(Solicitacoes, \"jwPkE0RZU0t3b/b1ofMIBJQqjRY=\");\n_c = Solicitacoes;\nexport default Solicitacoes;\nvar _c;\n$RefreshReg$(_c, \"Solicitacoes\");","map":{"version":3,"names":["React","useEffect","useState","api","calcularDistancia","jsxDEV","_jsxDEV","Solicitacoes","_s","solicitacoes","setSolicitacoes","coordenadas","setCoordenadas","get","then","response","data","solicitacoesComCoordenadas","Promise","all","map","solicitacao","pontoOrigem","fetchCoordinatesFromAddress","origem","endereco","pontoDestino","destino","catch","error","console","calcularValor","distancia","toFixed","fetch","encodeURIComponent","json","latitude","parseFloat","lat","longitude","lon","Error","children","fileName","_jsxFileName","lineNumber","columnNumber","s","valor","cliente_nome","id","_c","$RefreshReg$"],"sources":["C:/Users/guinh/OneDrive/Documentos/projetoFrete/fretefacil-frontend/src/Solicitacoes.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import api from './Api';\r\n\r\n// function Solicitacoes() {\r\n//   const [solicitacoes, setSolicitacoes] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     api.get('solicitacoes/')\r\n//       .then(response => {\r\n//         setSolicitacoes(response.data);\r\n//       })\r\n//       .catch(error => {\r\n//         console.error(\"Erro ao buscar solicitações:\", error);\r\n//       });\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Solicitações de Serviço</h2>\r\n//       <ul>\r\n//         {solicitacoes.map(s => (\r\n//           <li key={s.id}>\r\n//             {s.origem} para {s.destino} na data {s.data}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Solicitacoes;\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import api from './Api';\r\n\r\n// function Solicitacoes() {\r\n//   const [solicitacoes, setSolicitacoes] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     api.get('solicitacoes/')\r\n//       .then(response => {\r\n//         setSolicitacoes(response.data);\r\n//       })\r\n//       .catch(error => {\r\n//         console.error(\"Erro ao buscar solicitações:\", error);\r\n//       });\r\n//   }, []);\r\n\r\n//   // Função para calcular o valor com base na distância\r\n//   const calcularValor = (distancia) => {\r\n//     return (distancia * 1.5).toFixed(2);  \r\n//   };\r\n\r\n  \r\n// const fetchCoordinatesFromAddress = async (endereco) => {\r\n//   try {\r\n//     const response = await fetch(\r\n//       `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(endereco)}&format=json&limit=1`\r\n//     );\r\n//     const data = await response.json();\r\n//     if (data && data[0]) {\r\n//       return {\r\n//         latitude: parseFloat(data[0].lat),\r\n//         longitude: parseFloat(data[0].lon)\r\n//       };\r\n//     } else {\r\n//       throw new Error('Endereço não encontrado');\r\n//     }\r\n//   } catch (error) {\r\n//     console.error('Erro ao converter endereço em coordenadas:', error);\r\n//     return null;\r\n//   }\r\n// };\r\n\r\n// const calcularDistancia = (pontoOrigem, pontoDestino) => {\r\n//   // Verifique se os pontos são válidos\r\n//   if (\r\n//     !pontoOrigem ||\r\n//     !pontoDestino ||\r\n//     isNaN(pontoOrigem.latitude) ||\r\n//     isNaN(pontoOrigem.longitude) ||\r\n//     isNaN(pontoDestino.latitude) ||\r\n//     isNaN(pontoDestino.longitude)\r\n//   ) {\r\n//     console.error('Erro: pontos inválidos ou NaN');\r\n//     return 0;\r\n//   }\r\n\r\n//   // Fórmula de Haversine para calcular a distância entre dois pontos\r\n//   const φ1 = pontoOrigem.latitude * (Math.PI / 180); // Convertendo para radianos\r\n//   const φ2 = pontoDestino.latitude * (Math.PI / 180);\r\n//   const Δφ = (pontoDestino.latitude - pontoOrigem.latitude) * (Math.PI / 180);\r\n//   const Δλ = (pontoDestino.longitude - pontoOrigem.longitude) * (Math.PI / 180);\r\n\r\n//   const a =\r\n//     Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\r\n//     Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\r\n//   const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n//   const raioTerra = 6371; // Raio da Terra em km\r\n//   const distancia = raioTerra * c; // Distância em km\r\n\r\n//   return distancia;\r\n// };\r\n\r\n// const calcularDistanciaEntreEnderecos = async (enderecoOrigem, enderecoDestino) => {\r\n//   // Obtenha as coordenadas para os dois endereços\r\n//   const pontoOrigem = await fetchCoordinatesFromAddress(enderecoOrigem);\r\n//   const pontoDestino = await fetchCoordinatesFromAddress(enderecoDestino);\r\n\r\n//   if (!pontoOrigem || !pontoDestino) {\r\n//     console.error('Erro: não foi possível obter coordenadas');\r\n//     return;\r\n//   }\r\n\r\n//   // Calcule a distância usando a função de Haversine\r\n//   const distancia = calcularDistancia(pontoOrigem, pontoDestino);\r\n//   console.log('Distância entre os endereços: ', distancia, 'km');\r\n// };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Solicitações de Serviço</h2>\r\n//       <ul>\r\n//         {solicitacoes.map(s => {\r\n//             console.log(s);\r\n//           const distancia = calcularDistancia(s.origem, s.destino);\r\n//           const valor = calcularValor(distancia);\r\n//           return (\r\n//             <li key={s.id}>\r\n//               <h3>Solicitação de {s.cliente}</h3>\r\n//               <p>Origem: {s.origem.endereco} - Destino: {s.destino.endereco}</p>\r\n//               <p>Distância: {distancia} km</p>\r\n//               <p>Valor: R${valor}</p>\r\n//             </li>\r\n//           );\r\n//         })}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Solicitacoes;\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport api from './Api';\r\nimport { calcularDistancia } from './utils';\r\n\r\nfunction Solicitacoes() {\r\n  const [solicitacoes, setSolicitacoes] = useState([]);\r\n  const [coordenadas, setCoordenadas] = useState([]); // Estado para armazenar as coordenadas\r\n\r\n  // Buscar as solicitações\r\n  useEffect(() => {\r\n    api.get('solicitacoes/')\r\n      .then(async (response) => {\r\n        setSolicitacoes(response.data);\r\n        const solicitacoesComCoordenadas = await Promise.all(\r\n          response.data.map(async (solicitacao) => {\r\n            const pontoOrigem = await fetchCoordinatesFromAddress(solicitacao.origem.endereco);\r\n            const pontoDestino = await fetchCoordinatesFromAddress(solicitacao.destino.endereco);\r\n            return {\r\n              ...solicitacao,\r\n              pontoOrigem,\r\n              pontoDestino\r\n            };\r\n          })\r\n        );\r\n        setCoordenadas(solicitacoesComCoordenadas); // Atualiza as solicitações com coordenadas\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Erro ao buscar solicitações:\", error);\r\n      });\r\n  }, []);\r\n\r\n  // Função para calcular o valor com base na distância\r\n  const calcularValor = (distancia) => {\r\n    return (distancia * 1.5).toFixed(2);  \r\n  };\r\n\r\n  // Função para calcular a distância entre dois pontos usando a fórmula de Haversine\r\n  // const calcularDistancia = (pontoOrigem, pontoDestino) => {\r\n  //   if (\r\n  //     !pontoOrigem ||\r\n  //     !pontoDestino ||\r\n  //     isNaN(pontoOrigem.latitude) ||\r\n  //     isNaN(pontoOrigem.longitude) ||\r\n  //     isNaN(pontoDestino.latitude) ||\r\n  //     isNaN(pontoDestino.longitude)\r\n  //   ) {\r\n  //     console.error('Erro: pontos inválidos ou NaN');\r\n  //     return 0;\r\n  //   }\r\n\r\n  //   const φ1 = pontoOrigem.latitude * (Math.PI / 180);\r\n  //   const φ2 = pontoDestino.latitude * (Math.PI / 180);\r\n  //   const Δφ = (pontoDestino.latitude - pontoOrigem.latitude) * (Math.PI / 180);\r\n  //   const Δλ = (pontoDestino.longitude - pontoOrigem.longitude) * (Math.PI / 180);\r\n\r\n  //   const a =\r\n  //     Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\r\n  //     Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\r\n  //   const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n  //   const raioTerra = 6371; // Raio da Terra em km\r\n  //   const distancia = raioTerra * c; // Distância em km\r\n\r\n  //   return distancia;\r\n  // };\r\n\r\n  // Função para buscar as coordenadas a partir de um endereço\r\n  const fetchCoordinatesFromAddress = async (endereco) => {\r\n    try {\r\n      const response = await fetch(\r\n        `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(endereco)}&format=json&limit=1`\r\n      );\r\n      const data = await response.json();\r\n      if (data && data[0]) {\r\n        return {\r\n          latitude: parseFloat(data[0].lat),\r\n          longitude: parseFloat(data[0].lon)\r\n        };\r\n      } else {\r\n        throw new Error('Endereço não encontrado');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao converter endereço em coordenadas:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Solicitações de Serviço</h2>\r\n      <ul>\r\n        {coordenadas.map(s => {\r\n          // Calcula a distância apenas quando as coordenadas estão disponíveis\r\n          const distancia = calcularDistancia(s.pontoOrigem, s.pontoDestino);\r\n          const valor = calcularValor(distancia);\r\n          return (\r\n            <li key={s.id}>\r\n              <h3>Solicitação de {s.cliente_nome}</h3>\r\n              <p>Origem: {s.origem}</p>\r\n              <p>Destino: {s.destino}</p>\r\n              <p>Distância: {distancia} km</p>\r\n              <p>Valor: R${valor}</p>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Solicitacoes;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,OAAO;AACvB,SAASC,iBAAiB,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEpD;EACAD,SAAS,CAAC,MAAM;IACdE,GAAG,CAACU,GAAG,CAAC,eAAe,CAAC,CACrBC,IAAI,CAAC,MAAOC,QAAQ,IAAK;MACxBL,eAAe,CAACK,QAAQ,CAACC,IAAI,CAAC;MAC9B,MAAMC,0BAA0B,GAAG,MAAMC,OAAO,CAACC,GAAG,CAClDJ,QAAQ,CAACC,IAAI,CAACI,GAAG,CAAC,MAAOC,WAAW,IAAK;QACvC,MAAMC,WAAW,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}