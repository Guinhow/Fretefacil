{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\guinh\\\\OneDrive\\\\Documentos\\\\projetoFrete\\\\fretefacil-frontend\\\\src\\\\Solicitacoes.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import api from './Api';\n\n// function Solicitacoes() {\n//   const [solicitacoes, setSolicitacoes] = useState([]);\n\n//   useEffect(() => {\n//     api.get('solicitacoes/')\n//       .then(response => {\n//         setSolicitacoes(response.data);\n//       })\n//       .catch(error => {\n//         console.error(\"Erro ao buscar solicitações:\", error);\n//       });\n//   }, []);\n\n//   return (\n//     <div>\n//       <h2>Solicitações de Serviço</h2>\n//       <ul>\n//         {solicitacoes.map(s => (\n//           <li key={s.id}>\n//             {s.origem} para {s.destino} na data {s.data}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default Solicitacoes;\n\nimport React, { useEffect, useState } from 'react';\nimport api from './Api';\nimport L from 'leaflet'; // Importando o Leaflet para o cálculo da distância\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Solicitacoes() {\n  _s();\n  const [solicitacoes, setSolicitacoes] = useState([]);\n  useEffect(() => {\n    api.get('solicitacoes/').then(response => {\n      setSolicitacoes(response.data);\n    }).catch(error => {\n      console.error(\"Erro ao buscar solicitações:\", error);\n    });\n  }, []);\n\n  // Função para calcular o valor com base na distância\n  const calcularValor = distancia => {\n    return (distancia * 1.5).toFixed(2); // Multiplica a distância por 1,5\n  };\n  const fetchCoordinatesFromAddress = async endereco => {\n    try {\n      const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(endereco)}&format=json&limit=1`);\n      const data = await response.json();\n      if (data && data[0]) {\n        return {\n          latitude: parseFloat(data[0].lat),\n          longitude: parseFloat(data[0].lon)\n        };\n      } else {\n        throw new Error('Endereço não encontrado');\n      }\n    } catch (error) {\n      console.error('Erro ao converter endereço em coordenadas:', error);\n      return null;\n    }\n  };\n  const calcularDistancia = (pontoOrigem, pontoDestino) => {\n    // Verifique se os pontos são válidos\n    if (!pontoOrigem || !pontoDestino || isNaN(pontoOrigem.latitude) || isNaN(pontoOrigem.longitude) || isNaN(pontoDestino.latitude) || isNaN(pontoDestino.longitude)) {\n      console.error('Erro: pontos inválidos ou NaN');\n      return 0;\n    }\n\n    // Fórmula de Haversine para calcular a distância entre dois pontos\n    const φ1 = pontoOrigem.latitude * (Math.PI / 180); // Convertendo para radianos\n    const φ2 = pontoDestino.latitude * (Math.PI / 180);\n    const Δφ = (pontoDestino.latitude - pontoOrigem.latitude) * (Math.PI / 180);\n    const Δλ = (pontoDestino.longitude - pontoOrigem.longitude) * (Math.PI / 180);\n    const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const raioTerra = 6371; // Raio da Terra em km\n    const distancia = raioTerra * c; // Distância em km\n\n    return distancia;\n  };\n  const calcularDistanciaEntreEnderecos = async (enderecoOrigem, enderecoDestino) => {\n    // Obtenha as coordenadas para os dois endereços\n    const pontoOrigem = await fetchCoordinatesFromAddress(enderecoOrigem);\n    const pontoDestino = await fetchCoordinatesFromAddress(enderecoDestino);\n    if (!pontoOrigem || !pontoDestino) {\n      console.error('Erro: não foi possível obter coordenadas');\n      return;\n    }\n\n    // Calcule a distância usando a função de Haversine\n    const distancia = calcularDistancia(pontoOrigem, pontoDestino);\n    console.log('Distância entre os endereços: ', distancia, 'km');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Solicita\\xE7\\xF5es de Servi\\xE7o\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: solicitacoes.map(s => {\n        console.log(s);\n        const distancia = calcularDistancia(s.origem, s.destino);\n        const valor = calcularValor(distancia);\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Solicita\\xE7\\xE3o de \", s.cliente]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Origem: \", s.origem.endereco, \" - Destino: \", s.destino.endereco]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Dist\\xE2ncia: \", distancia, \" km\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Valor: R$\", valor]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this)]\n        }, s.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_s(Solicitacoes, \"mQoncaRz1KkVSoNjdfreS2KWmKM=\");\n_c = Solicitacoes;\nexport default Solicitacoes;\nvar _c;\n$RefreshReg$(_c, \"Solicitacoes\");","map":{"version":3,"names":["React","useEffect","useState","api","L","jsxDEV","_jsxDEV","Solicitacoes","_s","solicitacoes","setSolicitacoes","get","then","response","data","catch","error","console","calcularValor","distancia","toFixed","fetchCoordinatesFromAddress","endereco","fetch","encodeURIComponent","json","latitude","parseFloat","lat","longitude","lon","Error","calcularDistancia","pontoOrigem","pontoDestino","isNaN","φ1","Math","PI","φ2","Δφ","Δλ","a","sin","cos","c","atan2","sqrt","raioTerra","calcularDistanciaEntreEnderecos","enderecoOrigem","enderecoDestino","log","children","fileName","_jsxFileName","lineNumber","columnNumber","map","s","origem","destino","valor","cliente","id","_c","$RefreshReg$"],"sources":["C:/Users/guinh/OneDrive/Documentos/projetoFrete/fretefacil-frontend/src/Solicitacoes.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import api from './Api';\r\n\r\n// function Solicitacoes() {\r\n//   const [solicitacoes, setSolicitacoes] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     api.get('solicitacoes/')\r\n//       .then(response => {\r\n//         setSolicitacoes(response.data);\r\n//       })\r\n//       .catch(error => {\r\n//         console.error(\"Erro ao buscar solicitações:\", error);\r\n//       });\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Solicitações de Serviço</h2>\r\n//       <ul>\r\n//         {solicitacoes.map(s => (\r\n//           <li key={s.id}>\r\n//             {s.origem} para {s.destino} na data {s.data}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Solicitacoes;\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport api from './Api';\r\nimport L from 'leaflet';  // Importando o Leaflet para o cálculo da distância\r\n\r\nfunction Solicitacoes() {\r\n  const [solicitacoes, setSolicitacoes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    api.get('solicitacoes/')\r\n      .then(response => {\r\n        setSolicitacoes(response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Erro ao buscar solicitações:\", error);\r\n      });\r\n  }, []);\r\n\r\n  // Função para calcular o valor com base na distância\r\n  const calcularValor = (distancia) => {\r\n    return (distancia * 1.5).toFixed(2);  // Multiplica a distância por 1,5\r\n  };\r\n\r\n  \r\nconst fetchCoordinatesFromAddress = async (endereco) => {\r\n  try {\r\n    const response = await fetch(\r\n      `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(endereco)}&format=json&limit=1`\r\n    );\r\n    const data = await response.json();\r\n    if (data && data[0]) {\r\n      return {\r\n        latitude: parseFloat(data[0].lat),\r\n        longitude: parseFloat(data[0].lon)\r\n      };\r\n    } else {\r\n      throw new Error('Endereço não encontrado');\r\n    }\r\n  } catch (error) {\r\n    console.error('Erro ao converter endereço em coordenadas:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nconst calcularDistancia = (pontoOrigem, pontoDestino) => {\r\n  // Verifique se os pontos são válidos\r\n  if (\r\n    !pontoOrigem ||\r\n    !pontoDestino ||\r\n    isNaN(pontoOrigem.latitude) ||\r\n    isNaN(pontoOrigem.longitude) ||\r\n    isNaN(pontoDestino.latitude) ||\r\n    isNaN(pontoDestino.longitude)\r\n  ) {\r\n    console.error('Erro: pontos inválidos ou NaN');\r\n    return 0;\r\n  }\r\n\r\n  // Fórmula de Haversine para calcular a distância entre dois pontos\r\n  const φ1 = pontoOrigem.latitude * (Math.PI / 180); // Convertendo para radianos\r\n  const φ2 = pontoDestino.latitude * (Math.PI / 180);\r\n  const Δφ = (pontoDestino.latitude - pontoOrigem.latitude) * (Math.PI / 180);\r\n  const Δλ = (pontoDestino.longitude - pontoOrigem.longitude) * (Math.PI / 180);\r\n\r\n  const a =\r\n    Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\r\n    Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n  const raioTerra = 6371; // Raio da Terra em km\r\n  const distancia = raioTerra * c; // Distância em km\r\n\r\n  return distancia;\r\n};\r\n\r\nconst calcularDistanciaEntreEnderecos = async (enderecoOrigem, enderecoDestino) => {\r\n  // Obtenha as coordenadas para os dois endereços\r\n  const pontoOrigem = await fetchCoordinatesFromAddress(enderecoOrigem);\r\n  const pontoDestino = await fetchCoordinatesFromAddress(enderecoDestino);\r\n\r\n  if (!pontoOrigem || !pontoDestino) {\r\n    console.error('Erro: não foi possível obter coordenadas');\r\n    return;\r\n  }\r\n\r\n  // Calcule a distância usando a função de Haversine\r\n  const distancia = calcularDistancia(pontoOrigem, pontoDestino);\r\n  console.log('Distância entre os endereços: ', distancia, 'km');\r\n};\r\n\r\n  return (\r\n    <div>\r\n      <h2>Solicitações de Serviço</h2>\r\n      <ul>\r\n        {solicitacoes.map(s => {\r\n            console.log(s);\r\n          const distancia = calcularDistancia(s.origem, s.destino);\r\n          const valor = calcularValor(distancia);\r\n          return (\r\n            <li key={s.id}>\r\n              <h3>Solicitação de {s.cliente}</h3>\r\n              <p>Origem: {s.origem.endereco} - Destino: {s.destino.endereco}</p>\r\n              <p>Distância: {distancia} km</p>\r\n              <p>Valor: R${valor}</p>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Solicitacoes;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}