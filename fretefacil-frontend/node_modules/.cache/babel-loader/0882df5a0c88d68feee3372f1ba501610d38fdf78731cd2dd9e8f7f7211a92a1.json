{"ast":null,"code":"// import L from 'leaflet';\n\n// export const calcularDistancia = (novaPosicao, outroPonto) => {\n//   if (novaPosicao && outroPonto) {\n//     const ponto1 = L.latLng(novaPosicao.lat, novaPosicao.lng);\n//     const ponto2 = L.latLng(outroPonto.lat, outroPonto.lng);\n//     const distanciaMetros = ponto1.distanceTo(ponto2); \n//     return (distanciaMetros / 1000).toFixed(2);  // Retorna em km com duas casas decimais\n//   }\n//   return 0; // Se algum ponto for inválido, retorna 0\n// };\n\nimport L from 'leaflet';\nexport const calcularDistancia = (novaPosicao, outroPonto) => {\n  if (novaPosicao && novaPosicao.lat !== undefined && novaPosicao.lng !== undefined && outroPonto && outroPonto.lat !== undefined && outroPonto.lng !== undefined) {\n    const ponto1 = L.latLng(novaPosicao.lat, novaPosicao.lng);\n    const ponto2 = L.latLng(outroPonto.lat, outroPonto.lng);\n    const distanciaMetros = ponto1.distanceTo(ponto2);\n    return (distanciaMetros / 1000).toFixed(2); // Retorna em km com duas casas decimais\n  }\n  console.error(\"Erro: um ou ambos os pontos estão inválidos\");\n  return 0; // Se algum ponto for inválido, retorna 0\n};","map":{"version":3,"names":["L","calcularDistancia","novaPosicao","outroPonto","lat","undefined","lng","ponto1","latLng","ponto2","distanciaMetros","distanceTo","toFixed","console","error"],"sources":["C:/Users/guinh/OneDrive/Documentos/projetoFrete/fretefacil-frontend/src/utils.js"],"sourcesContent":["// import L from 'leaflet';\r\n\r\n// export const calcularDistancia = (novaPosicao, outroPonto) => {\r\n//   if (novaPosicao && outroPonto) {\r\n//     const ponto1 = L.latLng(novaPosicao.lat, novaPosicao.lng);\r\n//     const ponto2 = L.latLng(outroPonto.lat, outroPonto.lng);\r\n//     const distanciaMetros = ponto1.distanceTo(ponto2); \r\n//     return (distanciaMetros / 1000).toFixed(2);  // Retorna em km com duas casas decimais\r\n//   }\r\n//   return 0; // Se algum ponto for inválido, retorna 0\r\n// };\r\n\r\nimport L from 'leaflet';\r\n\r\nexport const calcularDistancia = (novaPosicao, outroPonto) => {\r\n  if (\r\n    novaPosicao &&\r\n    novaPosicao.lat !== undefined &&\r\n    novaPosicao.lng !== undefined &&\r\n    outroPonto &&\r\n    outroPonto.lat !== undefined &&\r\n    outroPonto.lng !== undefined\r\n  ) {\r\n    const ponto1 = L.latLng(novaPosicao.lat, novaPosicao.lng);\r\n    const ponto2 = L.latLng(outroPonto.lat, outroPonto.lng);\r\n    const distanciaMetros = ponto1.distanceTo(ponto2);\r\n    return (distanciaMetros / 1000).toFixed(2);  // Retorna em km com duas casas decimais\r\n  }\r\n  console.error(\"Erro: um ou ambos os pontos estão inválidos\");\r\n  return 0; // Se algum ponto for inválido, retorna 0\r\n};"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,CAAC,MAAM,SAAS;AAEvB,OAAO,MAAMC,iBAAiB,GAAGA,CAACC,WAAW,EAAEC,UAAU,KAAK;EAC5D,IACED,WAAW,IACXA,WAAW,CAACE,GAAG,KAAKC,SAAS,IAC7BH,WAAW,CAACI,GAAG,KAAKD,SAAS,IAC7BF,UAAU,IACVA,UAAU,CAACC,GAAG,KAAKC,SAAS,IAC5BF,UAAU,CAACG,GAAG,KAAKD,SAAS,EAC5B;IACA,MAAME,MAAM,GAAGP,CAAC,CAACQ,MAAM,CAACN,WAAW,CAACE,GAAG,EAAEF,WAAW,CAACI,GAAG,CAAC;IACzD,MAAMG,MAAM,GAAGT,CAAC,CAACQ,MAAM,CAACL,UAAU,CAACC,GAAG,EAAED,UAAU,CAACG,GAAG,CAAC;IACvD,MAAMI,eAAe,GAAGH,MAAM,CAACI,UAAU,CAACF,MAAM,CAAC;IACjD,OAAO,CAACC,eAAe,GAAG,IAAI,EAAEE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAE;EAC/C;EACAC,OAAO,CAACC,KAAK,CAAC,6CAA6C,CAAC;EAC5D,OAAO,CAAC,CAAC,CAAC;AACZ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}